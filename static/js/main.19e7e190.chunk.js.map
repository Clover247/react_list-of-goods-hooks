{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","isReversed","setReversed","Default","sortType","setSortType","sortedGoods","goods","copyOfGoods","Name","sort","good1","good2","localeCompare","Length","length","reverse","sortGoods","needChange","className","type","cn","onClick","preValue","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,gBAAAA,E,YAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAiBH,EAAOM,SAAxD,mBAAOC,EAAP,KAAiBC,EAAjB,KAOMC,EAtCR,SACEC,EACAH,EACAH,GAEA,IAAMO,EAAW,YAAOD,GAExB,OAAQH,GACN,KAAKP,EAAOY,KACVD,EAAYE,MAAK,SAACC,EAAOC,GACvB,OAAOD,EAAME,cAAcD,MAE7B,MACF,KAAKf,EAAOiB,OACVN,EAAYE,MAAK,SAACC,EAAOC,GACvB,OAAOD,EAAMI,OAASH,EAAMG,UAWlC,OAJId,GACFO,EAAYQ,UAGPR,EAYaS,CAAUnB,EAAiBM,EAAUH,GACnDiB,EAAcd,GAAYH,EAEhC,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYjB,IAAaP,EAAOY,OAEpCa,QAAS,WACPjB,EAAYR,EAAOY,OAPvB,iCAaA,wBACEW,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYjB,IAAaP,EAAOiB,SAEpCQ,QAAS,WACPjB,EAAYR,EAAOiB,SAPvB,4BAaA,wBACEM,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAA2B,IAAfpB,IAEhBqB,QAAS,kBAAMpB,GAAY,SAAAqB,GAAQ,OAAKA,MAN1C,qBAWCL,GACC,wBACEE,KAAK,SACLD,UAAWE,IACT,6BAEFC,QAtDU,WAClBpB,GAAY,GACZG,EAAYR,EAAOM,UA+Cb,sBAYJ,6BACGG,EAAYkB,KAAI,SAAAC,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCvHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.19e7e190.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortBy {\n  Name = 'name',\n  Length = 'length',\n  Default = '',\n}\n\ntype SortType = SortBy | '';\n\nfunction sortGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n): string[] {\n  const copyOfGoods = [...goods];\n\n  switch (sortType) {\n    case SortBy.Name:\n      copyOfGoods.sort((good1, good2) => {\n        return good1.localeCompare(good2);\n      });\n      break;\n    case SortBy.Length:\n      copyOfGoods.sort((good1, good2) => {\n        return good1.length - good2.length;\n      });\n      break;\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    copyOfGoods.reverse();\n  }\n\n  return copyOfGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReversed] = useState(false);\n  const [sortType, setSortType] = useState<SortBy>(SortBy.Default);\n\n  const resetFilter = () => {\n    setReversed(false);\n    setSortType(SortBy.Default);\n  };\n\n  const sortedGoods = sortGoods(goodsFromServer, sortType, isReversed);\n  const needChange = (sortType || isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortType !== SortBy.Name },\n          )}\n          onClick={() => {\n            setSortType(SortBy.Name);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            { 'is-light': sortType !== SortBy.Length },\n          )}\n          onClick={() => {\n            setSortType(SortBy.Length);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': isReversed === false },\n          )}\n          onClick={() => setReversed(preValue => !preValue)}\n        >\n          Reverse\n        </button>\n\n        {needChange && (\n          <button\n            type=\"button\"\n            className={cn(\n              'button is-danger is-light',\n            )}\n            onClick={resetFilter}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}